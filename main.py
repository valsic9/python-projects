"""This code constructs an scalable slot machine by setting global constants. 
For pretty format we will be using emojis from the emoji python module as symbols.
Each game by a player is generated by randomly creating spins using the python random module.
Finally, the input balance of the player interacts with the bet and the spin.
"""

import random
import emoji

MAX_LINES = 3
MIN_BET = 1
MAX_BET = 100

ROWS = 3
COLS = 3

symbols_count = {
    emoji.emojize(':money_bag:'): 2,
    emoji.emojize(':four_leaf_clover:'): 4,
    emoji.emojize(':cherries:'): 6,
    emoji.emojize(':lemon:'): 8,
}

symbols_value = {
    emoji.emojize(':money_bag:'): 6,
    emoji.emojize(':four_leaf_clover:'): 4,
    emoji.emojize(':cherries:'): 3,
    emoji.emojize(':lemon:'): 2,
}

def get_deposit():
    while True:
        amount = input('How much would you like to deposit?\n$')
        if amount.isdigit():
            amount = int(amount)
            if amount > 0:
                break
            else:
                print('The initial deposit must be greater than $0.')
        else:
            print('The deposit must be a number (non-decimal)')
    return amount

def get_bet_lines():
    while True:
        lines = input(f'How many lines would you like to bet on? (1-{MAX_LINES})\n')
        if lines.isdigit():
            lines = int(lines)
            if 0 < lines <= MAX_LINES:
                break
            else:
                print(f'The amount of lines must be between 1 and {MAX_LINES}')
        else:
            print(f'Please enter a number between 1 and {MAX_LINES}')
    return lines 

def get_bet_per_line():
    while True:
        bet = input(f'How much would you like to bet on each line?\n$')
        if bet.isdigit():
            bet = int(bet)
            if MIN_BET <= bet <= MAX_BET:
                break
            else:
                print(f'The bet must be between ${MIN_BET} and ${MAX_BET}.')
        else:
            print('The bet must be a number (non-decimal)')
    return bet  

def calculate_total_bet(bet, lines):
    return bet * lines

def get_all_symbols(symbols_count):
    all_symbols = []
    for symbol, count in symbols_count.items():
        for _ in range(count):
            all_symbols.append(symbol)
    return all_symbols

def get_random_cols(rows, cols, all_symbols):
    columns = []
    for _ in range(cols):
        column = []
        current_symbols = all_symbols[:]
        for _ in range(rows):
            value = random.choice(current_symbols)
            current_symbols.remove(value)
            column.append(value)
        columns.append(column)
    return columns
       
def print_spin(columns):
    for row in range(len(columns[0])):
        for i, column in enumerate(columns):
            if i != len(columns) -1:
                print(column[row], end=' | ')
            else:
                print(column[row], end='')
        print('')

def get_winnings(bet_lines, bet, columns, symbols_value):
    winnings = 0
    winning_lines = []
    for line in range(bet_lines):
        base_symbol = columns[0][line]
        for column in columns:
            symbol_to_check = column[line]
            if symbol_to_check != base_symbol:
                break
        else:
            winning_lines.append(line+1)
            winnings += symbols_value[base_symbol] * bet

    return winnings, winning_lines

def spin(balance):
    bet_lines = get_bet_lines()
    while True:
        bet_per_line = get_bet_per_line()
        total_bet = calculate_total_bet(bet_per_line, bet_lines)
        if total_bet <= balance:
            print(f'----\nBet: ${bet_per_line}.\nNumber of lines: {bet_lines}.\nTotal bet: ${total_bet}\n----')
            break
        else:
            print(f"You don't have enough money to bet ${total_bet}. Your current balance is ${balance}.")
    symbols = get_all_symbols(symbols_count)
    symbol_columns = get_random_cols(ROWS, COLS, symbols)
    print_spin(symbol_columns)
    winnings, winnning_lines = get_winnings(bet_lines, bet_per_line, symbol_columns, symbols_value)
    print(f'You won ${winnings}.')
    print(f'Winning lines:', *winnning_lines)

    return winnings - total_bet

def main():
    balance = get_deposit()
    while True:
        print(f'Current balance: ${balance}')
        game = input('Press enter to start playing (q to quit) ')
        if game == 'q':
            print(f'You left with ${balance}. See you soon! :)')
            break
        winnings = spin(balance)
        balance += winnings

    

main()